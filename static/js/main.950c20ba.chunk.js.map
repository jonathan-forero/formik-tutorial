{"version":3,"sources":["app/components/BasicForm/index.js","app/components/ComplexForm/index.js","app/components/DynamicForm/index.js","app/index.js","index.js"],"names":["INITIAL_VALUES","email","password","VALIDATIONS","validationSchema","Yup","shape","required","matches","errorContainer","props","className","children","BasicForm","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","handleSubmit","formProps","isSubmitting","htmlFor","type","name","component","disabled","firstName","max","lastName","acceptedTerms","oneOf","jobType","ErrorContainer","MyTextInput","label","useField","field","meta","id","touched","error","MySelect","MyCheckbox","ComplexForm","setTimeout","formik","placeholder","value","validationSchemaA","validationSchemaB","validationSchemaC","formType","isCurrentType","key","formDefinitions","find","obj","includes","render","DynamicForm","useState","setFormType","formData","resetForm","onChange","e","target","defaultValue","map","formItem","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.950c20ba.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst INITIAL_VALUES = {\n  email: \"\",\n  password: \"\",\n};\n\nconst VALIDATIONS = {\n  REQUIRED: \"Value Required\",\n};\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required(VALIDATIONS.REQUIRED)\n    .matches(\n      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      \"Invalid email address\"\n    ),\n  password: Yup.string().required(VALIDATIONS.REQUIRED),\n});\n\nconst handleSubmit = (values, setSubmitting) => {\n  alert(JSON.stringify(values));\n  setSubmitting(false);\n};\n\nconst errorContainer = (props) => (\n  <div className=\"error-message\">{props.children}</div>\n);\n\nconst BasicForm = () => {\n  return (\n    <div className=\"form-container\">\n      <h2>A Basic Formik Form</h2>\n      <Formik\n        initialValues={INITIAL_VALUES}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          handleSubmit(values, setSubmitting);\n        }}\n      >\n        {(formProps) => {\n          const { isSubmitting } = formProps;\n          return (\n            <Form>\n              <label htmlFor=\"email\">Email Address</label>\n              <Field type=\"email\" name=\"email\" />\n              <ErrorMessage name=\"email\" component={errorContainer} />\n\n              <label htmlFor=\"password\">Password</label>\n              <Field type=\"password\" name=\"password\" />\n              <ErrorMessage name=\"password\" component={errorContainer} />\n              <button type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default BasicForm;\n","import React from \"react\";\nimport { Formik, useField, Form } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .max(15, \"Must be 15 characters or less\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .max(20, \"Must be 20 characters or less\")\n    .required(\"Required\"),\n  email: Yup.string()\n    .required(\"Required\")\n    .matches(\n      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      \"Invalid email address\"\n    ),\n  acceptedTerms: Yup.boolean()\n    .required(\"Required\")\n    .oneOf([true], \"You must accept the terms and conditions.\"),\n  jobType: Yup.string()\n    .oneOf([\"designer\", \"development\", \"product\", \"other\"], \"Invalid Job Type\")\n    .required(\"Required\"),\n});\n\n// My Custom Inputs\nconst ErrorContainer = (props) => (\n  <div className=\"error-message\">{props.children}</div>\n);\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorContainer>{meta.error}</ErrorContainer>\n      ) : null}\n    </>\n  );\n};\n\nconst MySelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorContainer>{meta.error}</ErrorContainer>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\n  return (\n    <>\n      <label className=\"checkbox\">\n        <input type=\"checkbox\" {...field} {...props} />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst ComplexForm = () => {\n  return (\n    <Formik\n      initialValues={{\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        acceptedTerms: false,\n        jobType: \"\",\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 4000);\n      }}\n      validationSchema={validationSchema}\n    >\n      {(formik) => {\n        const { isSubmitting } = formik;\n        return (\n          <div className=\"form-container\">\n            <h2>A litle bit more complex Formik Form</h2>\n            <Form>\n              <MyTextInput\n                label=\"First Name\"\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"John\"\n              />\n\n              <MyTextInput\n                label=\"Last Name\"\n                name=\"lastName\"\n                type=\"text\"\n                placeholder=\"Doe\"\n              />\n\n              <MyTextInput\n                label=\"Email Address\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"jane@formik.com\"\n              />\n\n              <MySelect label=\"Job Type\" name=\"jobType\">\n                <option value=\"\">Select a job type</option>\n                <option value=\"designer\">Designer</option>\n                <option value=\"development\">Developer</option>\n                <option value=\"product\">Product Manager</option>\n                <option value=\"other\">Other</option>\n              </MySelect>\n\n              <MyCheckbox name=\"acceptedTerms\">\n                I accept the terms and conditions\n              </MyCheckbox>\n\n              <button type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </button>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ComplexForm;\n","import React, { useState } from \"react\";\nimport { Formik, useField, Form } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst validationSchemaA = Yup.object().shape({\n  firstName: Yup.string()\n    .max(15, \"Must be 15 characters or less\")\n    .required(\"Required\"),\n  email: Yup.string()\n    .required(\"Required\")\n    .matches(\n      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      \"Invalid email address\"\n    ),\n  acceptedTerms: Yup.boolean()\n    .required(\"Required\")\n    .oneOf([true], \"You must accept the terms and conditions.\"),\n  jobType: Yup.string()\n    .oneOf([\"designer\", \"development\", \"product\", \"other\"], \"Invalid Job Type\")\n    .required(\"Required\"),\n});\n\nconst validationSchemaB = Yup.object().shape({\n  lastName: Yup.string()\n    .max(20, \"Must be 20 characters or less\")\n    .required(\"Required\"),\n  acceptedTerms: Yup.boolean()\n    .required(\"Required\")\n    .oneOf([true], \"You must accept the terms and conditions.\"),\n  jobType: Yup.string()\n    .oneOf([\"designer\", \"development\", \"product\", \"other\"], \"Invalid Job Type\")\n    .required(\"Required\"),\n});\n\nconst validationSchemaC = Yup.object().shape({\n  acceptedTerms: Yup.boolean()\n    .required(\"Required\")\n    .oneOf([true], \"You must accept the terms and conditions.\"),\n});\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  acceptedTerms: false,\n  jobType: \"\",\n  formType: \"typeA\",\n};\n\nconst isCurrentType = (key, formType) =>\n  formDefinitions.find((obj) => obj.name === key).type.includes(formType);\n\nconst handleSubmit = (values, setSubmitting, formType) => {\n  setTimeout(() => {\n    const formData = {\n      firstName: isCurrentType(\"firstName\", formType) ? values.firstName : null,\n      lastName: isCurrentType(\"lastName\", formType) ? values.lastName : null,\n      email: isCurrentType(\"email\", formType) ? values.email : null,\n      acceptedTerms: isCurrentType(\"terms\", formType)\n        ? values.acceptedTerms\n        : null,\n      jobType: isCurrentType(\"jobType\", formType) ? values.jobType : null,\n    };\n    alert(JSON.stringify(formData, null, 2));\n    setSubmitting(false);\n  }, 2000);\n};\n\n// My Custom Inputs Components\nconst ErrorContainer = (props) => (\n  <div className=\"error-message\">{props.children}</div>\n);\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorContainer>{meta.error}</ErrorContainer>\n      ) : null}\n    </>\n  );\n};\n\nconst MySelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorContainer>{meta.error}</ErrorContainer>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\n  return (\n    <>\n      <label className=\"checkbox\">\n        <input type=\"checkbox\" {...field} {...props} />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\n// definitions\nconst formDefinitions = [\n  {\n    name: \"firstName\",\n    type: [\"typeA\"],\n    render: (\n      <MyTextInput\n        key=\"firstNameKey\"\n        label=\"First Name\"\n        name=\"firstName\"\n        type=\"text\"\n        placeholder=\"John\"\n      />\n    ),\n  },\n  {\n    name: \"lastName\",\n    type: [\"typeB\"],\n    render: (\n      <MyTextInput\n        key=\"lastNameKey\"\n        label=\"Last Name\"\n        name=\"lastName\"\n        type=\"text\"\n        placeholder=\"Doe\"\n      />\n    ),\n  },\n  {\n    name: \"email\",\n    type: [\"typeA\"],\n    render: (\n      <MyTextInput\n        key=\"email\"\n        label=\"Email Address\"\n        name=\"email\"\n        type=\"email\"\n        placeholder=\"jane@formik.com\"\n      />\n    ),\n  },\n  {\n    name: \"jobType\",\n    type: [\"typeA\", \"typeB\"],\n    render: (\n      <MySelect label=\"Job Type\" name=\"jobType\" key=\"jobType\">\n        <option value=\"\">Select a job type</option>\n        <option value=\"designer\">Designer</option>\n        <option value=\"development\">Developer</option>\n        <option value=\"product\">Product Manager</option>\n        <option value=\"other\">Other</option>\n      </MySelect>\n    ),\n  },\n  {\n    name: \"terms\",\n    type: [\"typeA\", \"typeB\", \"typeC\"],\n    render: (\n      <MyCheckbox name=\"acceptedTerms\" key=\"terms\">\n        I accept the terms and conditions\n      </MyCheckbox>\n    ),\n  },\n];\n\nconst DynamicForm = () => {\n  const [formType, setFormType] = useState(\"typeA\");\n\n  const getValidationSchema = () => {\n    switch (formType) {\n      case \"typeA\":\n        return validationSchemaA;\n      case \"typeB\":\n        return validationSchemaB;\n      default:\n        return validationSchemaC;\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values, { setSubmitting }) => {\n        handleSubmit(values, setSubmitting, formType);\n      }}\n      validationSchema={getValidationSchema}\n    >\n      {(formik) => {\n        const { isSubmitting, resetForm } = formik;\n        return (\n          <div className=\"form-container\">\n            <h2>Dynamic Formik Form</h2>\n            <Form>\n              <MySelect\n                onChange={(e) => {\n                  setFormType(e.target.value);\n                  resetForm();\n                }}\n                label=\"Form Type\"\n                name=\"type\"\n              >\n                <option defaultValue value=\"typeA\">\n                  A\n                </option>\n                <option value=\"typeB\">B</option>\n                <option value=\"typeC\">C</option>\n              </MySelect>\n              {formDefinitions.map((formItem) => {\n                return formItem.type.includes(formType) && formItem.render;\n              })}\n              <button type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </button>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default DynamicForm;\n","import React from \"react\";\nimport BasicForm from \"./components/BasicForm\";\nimport ComplexForm from \"./components/ComplexForm\";\nimport DynamicForm from \"./components/DynamicForm\";\n\nconst App = () => (\n  <div className=\"container\">\n    <h1>Formik POC</h1>\n    <BasicForm />\n    <ComplexForm />\n    <DynamicForm />\n  </div>\n);\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./styles/index.css\";\nimport \"./styles/custom.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}