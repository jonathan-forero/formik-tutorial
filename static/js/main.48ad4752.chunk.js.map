{"version":3,"sources":["app/components/BasicForm/index.js","app/components/ComplexForm/index.js","app/index.js","index.js"],"names":["INITIAL_VALUES","email","password","VALIDATIONS","validationSchema","Yup","shape","required","matches","errorContainer","props","className","children","BasicForm","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","handleSubmit","formProps","isSubmitting","htmlFor","type","name","component","disabled","firstName","max","lastName","acceptedTerms","oneOf","jobType","ErrorContainer","MyTextInput","label","useField","field","meta","id","touched","error","MySelect","MyCheckbox","ComplexForm","setTimeout","formik","placeholder","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48ad4752.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst INITIAL_VALUES = {\n  email: \"\",\n  password: \"\",\n};\n\nconst VALIDATIONS = {\n  REQUIRED: \"Value Required\",\n};\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required(VALIDATIONS.REQUIRED)\n    .matches(\n      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      \"Invalid email address\"\n    ),\n  password: Yup.string().required(VALIDATIONS.REQUIRED),\n});\n\nconst handleSubmit = (values, setSubmitting) => {\n  alert(JSON.stringify(values));\n  setSubmitting(false);\n};\n\nconst errorContainer = (props) => (\n  <div className=\"error-message\">{props.children}</div>\n);\n\nconst BasicForm = () => {\n  return (\n    <div className=\"form-container\">\n      <h2>A Basic Formik Form</h2>\n      <Formik\n        initialValues={INITIAL_VALUES}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          handleSubmit(values, setSubmitting);\n        }}\n      >\n        {(formProps) => {\n          const { isSubmitting } = formProps;\n          return (\n            <Form>\n              <label htmlFor=\"email\">Email Address</label>\n              <Field type=\"email\" name=\"email\" />\n              <ErrorMessage name=\"email\" component={errorContainer} />\n\n              <label htmlFor=\"password\">Password</label>\n              <Field type=\"password\" name=\"password\" />\n              <ErrorMessage name=\"password\" component={errorContainer} />\n              <button type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </button>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default BasicForm;\n","import React from \"react\";\nimport { Formik, useField } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .max(15, \"Must be 15 characters or less\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .max(20, \"Must be 20 characters or less\")\n    .required(\"Required\"),\n  email: Yup.string()\n    .required(\"Required\")\n    .matches(\n      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      \"Invalid email address\"\n    ),\n  acceptedTerms: Yup.boolean()\n    .required(\"Required\")\n    .oneOf([true], \"You must accept the terms and conditions.\"),\n  jobType: Yup.string()\n    .oneOf([\"designer\", \"development\", \"product\", \"other\"], \"Invalid Job Type\")\n    .required(\"Required\"),\n});\n\n// My Custom Inputs\nconst ErrorContainer = (props) => (\n  <div className=\"error-message\">{props.children}</div>\n);\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorContainer>{meta.error}</ErrorContainer>\n      ) : null}\n    </>\n  );\n};\n\nconst MySelect = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <ErrorContainer>{meta.error}</ErrorContainer>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\n  return (\n    <>\n      <label className=\"checkbox\">\n        <input type=\"checkbox\" {...field} {...props} />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst ComplexForm = () => {\n  return (\n    <Formik\n      initialValues={{\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        acceptedTerms: false,\n        jobType: \"\",\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 4000);\n      }}\n      validationSchema={validationSchema}\n    >\n      {(formik) => {\n        const { isSubmitting } = formik;\n        return (\n          <div className=\"form-container\">\n            <h2>A litle bit more complex Formik Form</h2>\n            <form onSubmit={formik.handleSubmit}>\n              <MyTextInput\n                label=\"First Name\"\n                name=\"firstName\"\n                type=\"text\"\n                placeholder=\"John\"\n              />\n\n              <MyTextInput\n                label=\"Last Name\"\n                name=\"lastName\"\n                type=\"text\"\n                placeholder=\"Doe\"\n              />\n\n              <MyTextInput\n                label=\"Email Address\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"jane@formik.com\"\n              />\n\n              <MySelect label=\"Job Type\" name=\"jobType\">\n                <option value=\"\">Select a job type</option>\n                <option value=\"designer\">Designer</option>\n                <option value=\"development\">Developer</option>\n                <option value=\"product\">Product Manager</option>\n                <option value=\"other\">Other</option>\n              </MySelect>\n\n              <MyCheckbox name=\"acceptedTerms\">\n                I accept the terms and conditions\n              </MyCheckbox>\n\n              <button type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </button>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ComplexForm;\n","import React from \"react\";\nimport BasicForm from \"./components/BasicForm\";\nimport ComplexForm from \"./components/ComplexForm\";\n\nconst App = () => (\n  <div className=\"container\">\n    <h1>Formik POC</h1>\n    <BasicForm />\n    <ComplexForm />\n  </div>\n);\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport \"./styles/index.css\";\nimport \"./styles/custom.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}